#include<stdio.h>
#define MAX_STACK_SIZE 100
typedef int element;
typedef struct
{
	element stack[MAX_STACK_SIZE];
	int top;
}StackType;

void init(StackType* s)
{
	s->top = -1;
}
int is_empty(StackType* s)
{
	return(s->top == -1);
}

int is_full(StackType* s)
{
	return(s->top == (MAX_STACK_SIZE - 1));
}

void push(StackType* s, element item)// 삽입함수
{
	if (is_full(s))
	{
		fprintf(stderr, "스택 포화 에러\n");
		return;
	}
	else
		s->stack[++(s->top)] = item;
}

element pop(StackType* s) // 삭제함수, 맨 위의 값 반환 후 삭제
{
	if (is_empty(s))
	{
		fprintf(stderr, "스택 공백 에러\n");
		exit(1);
	}
	else
		return s->stack[(s->top)--];
}

element peek(StackType* s) // 피크함수, 맨 위의 값 반환
{
	if (is_empty(s))
	{
		fprintf(stderr, "스택 공백 에러\n");
		exit(1);
	}
	else
		return s->stack[(s->top)];
}


int cheak_matching(char expr[])
{
	char ch;
	StackType s;
	init(&s);
	int i = 0;
	while (expr[i] != NULL)
	{
		ch = expr[i++];

		switch (ch)
		{
		case '(':
		case '[':
		case '{':
			push(&s, ch);
			break;
		case ')':
		case ']':
		case '}':
			if (is_empty(&s))
				return 0;
			else
			{
				char top_item = pop(&s);
				if (top_item == '(' && ch == ')' || top_item == '[' && ch == ']' || top_item == '{' && ch == '}')
					continue;
				else
					return 0;
				
			}
			break;
		}
	}
	if (!is_empty(&s))
		return 0;
	else
		return 1;

}

int main()
{
	printf("%d\n", cheak_matching("()(){}{}"));

}
