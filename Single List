#include<stdio.h>
#include<stdlib.h>
typedef int element;
typedef struct ListNode
{
	element data;
	struct ListNode* link;
}ListNode;

void insert_node(ListNode** phead, ListNode* p, ListNode* new_node)
{
	if (*phead == NULL)
	{
		new_node->link = NULL;
		*phead = new_node;
	}
	else if (p == NULL)
	{
		new_node->link = *phead;
		*phead = new_node;
	}
	else
	{
		new_node->link = p->link;
		p->link = new_node;
	}
}

void remove_node(ListNode** phead, ListNode* p, ListNode* removed)
{
	if (p == NULL)
		*phead = (*phead)->link;
	else
		p->link = removed->link;
	free(removed);
}

void display(ListNode* head)
{
	ListNode* p = head;
	while (p != NULL)
	{
		printf("%d->", p->data);
		p = p->link;
	}
	printf("\n");
}

ListNode* search(ListNode* head, int x)
{
	ListNode* p;
	p = head;
	while (p != NULL)
	{
		if (p->data == x)
			return p; // 탐색 성공
		p = p->link;
	}
	return p; // 탐색 실패, NULL 반환
}

ListNode* contact(ListNode* head1, ListNode* head2)
{
	ListNode* p;
	if (head1 == NULL) return head2;
	else if (head2 == NULL) return head1;
	else
	{
		p = head1;
		while (p->link != NULL)
			p = p->link;
		p->link = head2;
		return head1;
	}
}

ListNode* reverse(ListNode* head)
{
	//순회 포인터로 p,q,r사용
	ListNode* p, * q, * r;
	p = head; // p는 역순으로 만들 리스트
	q = NULL;  // q는 역순으로 만들 노드
	while (p != NULL)
	{
		r = q; // r은 역순으로 된 리스트. r은 q, q는 p를 차례로 따라간다.
		q = p;
		p = p->link;
		q->link = r; // q의 링크 방향을 바꾼다
	}
	return q; // q는 역순으로 된 리스트의 헤드 포인터
}
/*사진 참고.. create node*/
